"""replace_mute_all_with_mode

Revision ID: 2b8d9f4a1c7e
Revises: 91f46462bb8e
Create Date: 2025-07-02 10:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import table, column

# revision identifiers, used by Alembic.
revision: str = '2b8d9f4a1c7e' # Placeholder, will be auto-generated by Alembic
down_revision: Union[str, Sequence[str], None] = '91f46462bb8e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_settings', sa.Column('mute_list_mode', sa.String(), nullable=False, server_default='blacklist'))

    # Data migration:
    # Before dropping 'mute_all', transfer its state to 'mute_list_mode'
    user_settings_table = table('user_settings',
        column('mute_all', sa.Boolean),
        column('mute_list_mode', sa.String)
    )

    # Set mute_list_mode to 'whitelist' where mute_all was True
    op.execute(
        user_settings_table.update().
        where(user_settings_table.c.mute_all == True).
        values(mute_list_mode='whitelist')
    )
    # Set mute_list_mode to 'blacklist' where mute_all was False (already server_default, but explicit)
    op.execute(
        user_settings_table.update().
        where(user_settings_table.c.mute_all == False).
        values(mute_list_mode='blacklist')
    )

    op.drop_column('user_settings', 'mute_all')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_settings', sa.Column('mute_all', sa.BOOLEAN(), autoincrement=False, nullable=False, server_default=sa.false()))

    # Data migration:
    # Before dropping 'mute_list_mode', transfer its state back to 'mute_all'
    user_settings_table = table('user_settings',
        column('mute_all', sa.Boolean),
        column('mute_list_mode', sa.String)
    )

    # Set mute_all to True where mute_list_mode was 'whitelist'
    op.execute(
        user_settings_table.update().
        where(user_settings_table.c.mute_list_mode == 'whitelist').
        values(mute_all=True)
    )
    # Set mute_all to False where mute_list_mode was 'blacklist'
    op.execute(
        user_settings_table.update().
        where(user_settings_table.c.mute_list_mode == 'blacklist').
        values(mute_all=False)
    )

    op.drop_column('user_settings', 'mute_list_mode')
    # ### end Alembic commands ###
