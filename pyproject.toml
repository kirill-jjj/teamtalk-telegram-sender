[build-system]
requires = ["setuptools>=80.9.0"]
build-backend = "setuptools.build_meta"
backend-path = "."

[project]
name = "teamtalk-telegram-sender"
version = "0.1.0"
description = "A bot that bridges TeamTalk 5 server events (user join/leave) to Telegram notifications and forwards PMs."
readme = "README.md"
requires-python = ">=3.11, <3.13"
license = {file = "LICENSE"}
authors = [
    {name = "kirill-jjj", email = "kirillkolovi@gmail.com"},
]
keywords = ["teamtalk", "telegram", "bot", "notifications", "aiogram", "pytalk"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Natural Language :: Russian",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Internet",
    "Typing :: Typed",
]

dependencies = [
    "aiogram~=3.20.0",
    "py-talk-ex~=1.6.0",
    "python-dotenv~=1.1.0",
    "SQLAlchemy~=2.0.41",
    "aiosqlite~=0.21.0",
    'uvloop; sys_platform != "win32"',
    "Babel>=2.15.0",
    "pydantic-settings~=2.9",
    "pydantic~=2.11",
    "sqlmodel>=0.0.24",
    "alembic~=1.16",
    "cachetools~=6.1"
]

[project.urls]
Homepage = "https://github.com/kirill-jjj/teamtalk-telegram-sender"
Repository = "https://github.com/kirill-jjj/teamtalk-telegram-sender"
Issues = "https://github.com/kirill-jjj/teamtalk-telegram-sender/issues"

[tool.setuptools.packages.find]
where = ["."]  # Search for packages in the root directory
exclude = ["tests*"] # Exclude test packages

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 120
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity checks (`C901`) by default.
# E, W: pycodestyle errors and warnings
# F: Pyflakes errors
# I: import sorting (isort)
# C4: useful simplifications (e.g., dict(a=1) instead of {"a": 1})
# B: bugbear (potential bug detection)
# UP: auto-update syntax to newer Python versions
select = ["E", "W", "F", "I", "C4", "B", "UP"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[project.scripts]
teamtalk-telegram-sender = "sender:main_cli"
migrate = "scripts.run_alembic:main"
i18n = "scripts.manage_locales:main"

[tool.pytest.ini_options]
pythonpath = [
  "."
]
asyncio_mode = "auto"
# uv pip install -e .
# coverage run -m pytest
# coverage report
# coverage html
# python -m http.server --directory htmlcov
# mypy --install-types --non-interactive bot
# mypy bot --exclude bot/locales --exclude bot/database/versions
# ruff check . --fix
# ruff format .

[project.optional-dependencies]
dev = [
    "pytest>=8.3.2",
    "pytest-asyncio>=0.23.8",
    "pytest-cov>=5.0.0",
    "mypy>=1.11.1",
    "ruff>=0.5.5"
]